---
import Layout from '../layouts/Layout.astro';
---

<Layout title='Sliding Penguins'>
  <div class='game'>
    <canvas id='game-canvas'></canvas>
  </div>
</Layout>

<script>
  import { Application, Container, Sprite } from 'pixi.js';

  const app = new Application({
    view: document.getElementById('game-canvas') as HTMLCanvasElement,
    resolution: window.devicePixelRatio || 1,
    autoDensity: true,
    backgroundColor: '#9eeeff',
    width: 420,
    height: 640,
  });

  let speed = 6;

  const treeBorder = new Container();
  treeBorder.sortableChildren = true;
  app.stage.addChild(treeBorder);

  const background = Sprite.from('sliding-penguins/background.png');
  background.x = 0;
  background.y = 0;
  background.eventMode = 'static';

  treeBorder.addChild(background);

  const player = Sprite.from('sliding-penguins/penguin.png');
  player.anchor.set(0.5);

  player.x = app.screen.width / 2;
  player.y = 80;
  player.scale.set(0.12);

  app.stage.addChild(player);

  background.on('pointermove', (event) => {
    if (player.x + event.movementX > 80 && player.x + event.movementX < app.screen.width - 80) {
      player.x += event.movementX;
    }
  });

  for (let index = 0; index < app.screen.height / 60 + 2; index++) {
    const leftTree = Sprite.from('sliding-penguins/tree.png');
    leftTree.anchor.set(0.5);

    leftTree.x = Math.floor(Math.random() * 20);
    leftTree.y = index * 60;
    leftTree.scale.set(0.2);

    treeBorder.addChild(leftTree);

    const rightTree = Sprite.from('sliding-penguins/tree.png');
    rightTree.anchor.set(0.5);

    rightTree.x = Math.floor(Math.random() * 20) + app.screen.width - 20;
    rightTree.y = index * 60;
    rightTree.scale.set(0.2);

    treeBorder.addChild(rightTree);

    let currentTreesYDirection = 1;

    app.ticker.add((delta: number) => {
      leftTree.y -= speed * delta * currentTreesYDirection;
      rightTree.y -= speed * delta * currentTreesYDirection;

      if (currentTreesYDirection === 1 && leftTree.getBounds().bottom < 80) {
        currentTreesYDirection = -1;
        leftTree.zIndex = -2;
        rightTree.zIndex = -2;
      }

      if (currentTreesYDirection === -1 && leftTree.getBounds().top > 80) {
        currentTreesYDirection = 1;

        const higherZIndex = treeBorder.children[treeBorder.children.length - 1].zIndex;

        leftTree.y = app.screen.height + 20;
        leftTree.zIndex = higherZIndex + 1;

        rightTree.y = app.screen.height + 20;
        rightTree.zIndex = higherZIndex + 1;
      }
    });
  }
</script>
